<!-- -----------------------CSS Lecture 1: Introduction to CSS------------------------------------------------------------------- -->

1. What is CSS?
CSS (Cascading Style Sheets) is used to style HTML elements.
It controls layout, colors, fonts, spacing, etc.

2. Types of CSS
Inline CSS: Style directly within an element using the style attribute.
<p style="color: red;">This is red text.</p>
Internal CSS: Defined within a <style> tag in the <head>.
<style>
    p {
        color: blue;
    }
</style>
External CSS: Written in a separate file and linked using <link>.
<link rel="stylesheet" href="styles.css">

3. CSS Syntax
selector {
    property: value;
}
Selector: Targets the element(s) to style (e.g., p, .class, #id).
Property: The style property to apply (e.g., color, font-size).
Value: The value for the property (e.g., red, 16px).

4. Selectors
Element Selector: Targets all elements of a type.
p { color: green; }
Class Selector: Targets elements with a specific class.
.classname { color: blue; }
HTML: <p class="classname">Text</p>
ID Selector: Targets a unique element by its ID.
#idname { color: orange; }
HTML: <p id="idname">Text</p>

5. Comments in CSS
Syntax:
/* This is a comment */

6. Basic Properties
color: Text color.
background-color: Background color.
font-size: Size of the text.
text-align: Align text (e.g., left, center, right).
Task:
Create an HTML page styled with:

Inline CSS to change a heading color.
Internal CSS to style a paragraph.
External CSS to style a button.



<!-- -----------------------------------CSS Lecture 2: Box Model and Layout Basics------------------------------------------------------- -->

1. CSS Box Model
The box model is the foundation of layout in CSS. Every HTML element is a rectangular box consisting of the following layers:

Content: The actual content inside the element.
Padding: Space between the content and the border.
Border: Surrounds the padding and content.
Margin: Space between the element and its neighbors.
Box Model Example:

div {
    width: 200px;
    height: 100px;
    padding: 10px;
    border: 5px solid black;
    margin: 15px;
}

2. Box Model Properties
width and height: Define the size of the content area.
padding: Adds space inside the element around the content.
border: Adds a border around the element.
Example: border: 2px solid blue;
margin: Adds space outside the element.
Visual Calculation:

Total width = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right.


3. Display Property
Determines how an element is displayed.

Block: Takes the full width of its container (e.g., <div>).
div {
    display: block;
}
Inline: Takes only as much width as its content (e.g., <span>).
span {
    display: inline;
}
Inline-Block: Combines inline behavior but respects box model properties.
None: Hides the element.


4. Positioning Basics
Static (default): Normal flow of the document.
Relative: Positions relative to its normal position.
div {
    position: relative;
    top: 10px; /* Moves 10px down */
}
Absolute: Positions relative to the nearest positioned ancestor.
Fixed: Stays in place relative to the viewport.

5. Overflow Property
Controls how content outside an element's box is handled.

visible (default): Content spills out.
hidden: Content is clipped.
scroll: Adds scrollbars.
auto: Adds scrollbars if necessary.
Task:
Create a box with padding, margin, and a colored border.
Use position: relative to shift an element slightly.
Experiment with the overflow property on a container with excess content.


-------------------------- CSS Lecture 3: Styling Text and Fonts -------------------------------------------------------------------------

1. Text Properties
Color: Sets the color of the text.
p {
    color: blue;
}
Text Alignment: Aligns text within its container.
Values: left | right | center | justify.
h1 {
    text-align: center;
}
Text Decoration: Adds or removes decorations.
Values: none | underline | overline | line-through.
a {
    text-decoration: none;
}
Text Transform: Changes text case.
Values: uppercase | lowercase | capitalize | none.
h2 {
    text-transform: uppercase;
}
Line Height: Adjusts spacing between lines of text.
p {
    line-height: 1.5;
}

2. Font Properties
Font Family: Sets the font type.
body {
    font-family: Arial, sans-serif;
}
Use fallback fonts in case the primary font isn't available.
Font Size: Sets the size of the text.
Units: px, em, rem, %.
h1 {
    font-size: 24px;
}
Font Weight: Sets the thickness of the text.
Values: normal | bold | lighter | numerical values (100-900).
p {
    font-weight: bold;
}
Font Style: Sets the style of the font.
Values: normal | italic | oblique.
em {
    font-style: italic;
}

3. Text Shadows
Adds shadow effects to text.

h1 {
    text-shadow: 2px 2px 5px gray;
}

4. Custom Fonts (Google Fonts)
Link a Google Font in your HTML:
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
Use it in CSS:
body {
    font-family: 'Roboto', sans-serif;
}
Task:
Style headings and paragraphs with different font-family and font-size.
Add a shadow effect to a heading.
Use Google Fonts to apply a custom font.


<!-- ------------------------------------CSS Lecture 4: Backgrounds and Gradients ---------------------------------------------------------- -->

1. Background Color
Adds a background color to an element.
div {
    background-color: lightblue;
}

2. Background Image
Sets an image as the background.
div {
    background-image: url('background.jpg');
}

3. Background Repeat
Controls how the background image is repeated.
Values: repeat (default) | no-repeat | repeat-x | repeat-y.
div {
    background-image: url('pattern.png');
    background-repeat: no-repeat;
}

4. Background Position
Positions the background image.
Values: left, center, right, top, bottom or coordinates (x% y% or xpx ypx).
div {
    background-image: url('image.jpg');
    background-position: center;
}

5. Background Size
Resizes the background image.
Values: auto | cover | contain | specific dimensions.
div {
    background-image: url('large-image.jpg');
    background-size: cover;
}

6. Background Attachment
Controls whether the background image scrolls with the page or stays fixed.
Values: scroll (default) | fixed | local.
div {
    background-image: url('image.jpg');
    background-attachment: fixed;
}

7. Gradients
Gradients allow smooth transitions between colors.

Linear Gradient:

div {
    background: linear-gradient(to right, red, yellow);
}
Direction: to right | to bottom | 45deg, etc.
Radial Gradient:

div {
    background: radial-gradient(circle, red, yellow, blue);
}

8. Multiple Backgrounds
You can layer multiple backgrounds.
div {
    background: url('pattern.png'), linear-gradient(to right, red, yellow);
}

Task:
Create a box with a background image, set to cover and centered.
Add a linear gradient as the background for a header.
Use multiple backgrounds to create a layered effect.


<!-- ------------------------------------------------------CSS Lecture 5: Flexbox (Flexible Box Layout) --------------------------------------------------->

1. What is Flexbox?
Flexbox is a layout model in CSS designed for arranging items within a container, even when their sizes are dynamic. It simplifies alignment, spacing, and distribution of elements.

2. Setting Up Flexbox
Apply display: flex; to the container element.
.container {
    display: flex;
}

3. Main Axis and Cross Axis
Main Axis: Defined by flex-direction (default: horizontal left-to-right).
Cross Axis: Perpendicular to the main axis.

4. Flex Container Properties
flex-direction: Defines the direction of the flex items.
.container {
    flex-direction: row; /* Default */
    /* Other values: row-reverse, column, column-reverse */
}
justify-content: Aligns items along the main axis.
.container {
    justify-content: flex-start; /* Default */
    /* Other values: center, flex-end, space-around, space-between, space-evenly */
}
align-items: Aligns items along the cross axis.
.container {
    align-items: stretch; /* Default */
    /* Other values: flex-start, flex-end, center, baseline */
}
align-content: Aligns rows when there are multiple lines (only for flex-wrap: wrap).
.container {
    align-content: stretch; /* Default */
    /* Other values: flex-start, flex-end, center, space-around, space-between */
}
flex-wrap: Controls whether items wrap onto the next line.
.container {
    flex-wrap: nowrap; /* Default */
    /* Other values: wrap, wrap-reverse */
}

5. Flex Item Properties
flex: Controls how items grow, shrink, or take up space.
.item {
    flex: 1; /* Equal space */
}
order: Changes the order of items (default is 0).
.item {
    order: 1;
}
align-self: Overrides align-items for individual items.
.item {
    align-self: center; /* Values: auto, flex-start, flex-end, center, baseline, stretch */
}

6. Example
<div class="container">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
</div>

<style>
.container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
}
.item {
    flex: 1;
    margin: 10px;
    text-align: center;
    padding: 20px;
    background-color: lightblue;
}
</style>
Task:
Create a flex container with three items, evenly spaced.
Experiment with flex-direction and justify-content.
Adjust individual items using flex and order.


<!-- ---------------------------------------------------------CSS Lecture 6: Grid Layout --------------------------------------------------->

1. What is CSS Grid?
CSS Grid Layout is a two-dimensional layout system that allows you to design complex layouts with rows and columns.

2. Setting Up CSS Grid
To use CSS Grid, apply display: grid to the container element.

.container {
    display: grid;
}

3. Grid Container Properties
grid-template-columns: Defines the number and size of columns.

.container {
    grid-template-columns: 100px 200px 100px;
}
You can use values like px, %, fr (fraction of available space).
Example: grid-template-columns: 1fr 2fr; (first column takes 1/3 of the space, second takes 2/3).
grid-template-rows: Defines the number and size of rows.

.container {
    grid-template-rows: 50px auto 100px;
}
grid-gap (or gap): Sets space between rows and columns.

.container {
    gap: 10px;
}
grid-template-areas: Defines the layout by naming grid areas.

.container {
    grid-template-areas: "header header header" "sidebar content content" "footer footer footer";
}

4. Grid Item Properties
grid-column: Specifies where an item should start and end across columns.

.item {
    grid-column: 1 / 3; /* Start at column 1, end at column 3 */
}
grid-row: Specifies where an item should start and end across rows.

.item {
    grid-row: 1 / 2; /* Start at row 1, end at row 2 */
}
grid-area: A shorthand for grid-row and grid-column combined, or for using grid-template-areas.

.item {
    grid-area: 2 / 1 / 3 / 3; /* row-start / column-start / row-end / column-end */
}

5. Auto Placement
When you don't explicitly place items in grid cells, CSS Grid automatically places them into the available cells. You can control this with:

grid-auto-rows: Specifies the default size for rows.

.container {
    grid-auto-rows: 100px;
}
grid-auto-columns: Specifies the default size for columns.

.container {
    grid-auto-columns: 200px;
}

6. Example: Simple Grid Layout
<div class="container">
    <div class="header">Header</div>
    <div class="sidebar">Sidebar</div>
    <div class="content">Content</div>
    <div class="footer">Footer</div>
</div>

<style>
.container {
    display: grid;
    grid-template-columns: 1fr 3fr; /* 2 columns: sidebar 1fr, content 3fr */
    grid-template-rows: auto 1fr auto; /* 3 rows: header, content, footer */
    gap: 10px;
}

.header {
    grid-column: 1 / -1; /* Full width across columns */
}

.sidebar {
    grid-row: 2 / 3;
}

.footer {
    grid-column: 1 / -1; /* Full width across columns */
}
</style>

7. Responsive Design with Grid
To make the grid layout responsive, you can use media queries to change the grid layout for different screen sizes.

@media (max-width: 600px) {
    .container {
        grid-template-columns: 1fr; /* Single column layout on small screens */
    }
}
Task:
Create a grid with three columns, with different content in each grid item.
Use grid-template-areas for layout management.
Experiment with grid-column and grid-row to position items manually.



------------------------------------------------------------ CSS Lecture 7: Positioning and Z-Index ---------------------------------------

1. Positioning Types
CSS provides several positioning schemes to control the position of elements within a page.

Static Positioning (default):

Elements are positioned according to the normal document flow.
.element {
    position: static; /* Default value */
}
Relative Positioning:

The element is positioned relative to its normal position.
top, right, bottom, and left adjust its position from where it would normally be.
.element {
    position: relative;
    top: 20px;
    left: 30px;
}
Absolute Positioning:

The element is positioned relative to the nearest positioned ancestor (i.e., an element with position: relative, absolute, or fixed).
It is removed from the document flow.
.element {
    position: absolute;
    top: 50px;
    left: 100px;
}
Fixed Positioning:

The element is positioned relative to the browser window and stays fixed even when the page is scrolled.
.element {
    position: fixed;
    top: 10px;
    right: 10px;
}
Sticky Positioning:

The element toggles between relative and fixed, depending on the scroll position. It becomes fixed once its scroll position crosses a threshold.
.element {
    position: sticky;
    top: 0; /* Sticks to the top of the viewport when scrolling */
}

2. Z-Index
Z-Index is used to control the stacking order of elements. Higher values appear in front of lower ones.
Works only with positioned elements (position: relative, absolute, fixed, or sticky).
.element {
    position: absolute;
    z-index: 10; /* Higher value = on top */
}
.behind {
    position: absolute;
    z-index: 5; /* Lower value = behind */
}

3. Example: Using Positioning
<div class="container">
    <div class="box">Box 1</div>
    <div class="box">Box 2</div>
</div>

<style>
.container {
    position: relative;
    width: 300px;
    height: 300px;
    background-color: lightgray;
}

.box {
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: red;
    color: white;
    text-align: center;
    line-height: 100px;
}

.box:nth-child(1) {
    top: 20px;
    left: 20px;
}

.box:nth-child(2) {
    top: 50px;
    left: 50px;
    z-index: 1; /* Box 2 will be in front of Box 1 */
}
</style>

4. CSS Transforms
Transforms allow you to move, rotate, scale, or skew an element.

Translate: Moves an element along the X and Y axes.

.element {
    transform: translate(50px, 20px);
}
Rotate: Rotates an element.

.element {
    transform: rotate(45deg);
}
Scale: Scales an element.

.element {
    transform: scale(1.5); /* Enlarges the element by 1.5 times */
}
Skew: Skews an element along the X and Y axes.

.element {
    transform: skew(20deg, 10deg);
}

5. Combining Transforms
You can combine multiple transform functions.

.element {
    transform: translate(30px, 30px) rotate(45deg);
}

6. Example: Sticky Header
<header class="sticky-header">Sticky Header</header>

<style>
.sticky-header {
    position: sticky;
    top: 0;
    background-color: #333;
    color: white;
    padding: 10px;
    text-align: center;
}
</style>
Task:
Create a fixed footer that stays at the bottom of the page.
Experiment with position: absolute and z-index to layer two overlapping elements.
Create a sticky header that stays at the top of the page while scrolling.


<!-- -------------------------------------------CSS Lecture 8: Transitions, Animations, and Responsive Design -------------------------------->

1. CSS Transitions
CSS transitions allow you to change property values smoothly over a given duration when a state changes (e.g., hover).

Syntax:

element {
    transition: property duration timing-function delay;
}
Example: Hover Transition

.box {
    width: 100px;
    height: 100px;
    background-color: red;
    transition: width 0.5s ease-in-out;
}

.box:hover {
    width: 200px;
}
Transition Properties:

property: The CSS property to apply the transition to (e.g., width, color).
duration: Time in seconds or milliseconds (e.g., 0.5s).
timing-function: Specifies the timing function (e.g., linear, ease, ease-in-out).
delay: Delay before the transition starts (optional).

2. CSS Animations
CSS animations allow more complex changes than transitions. They define keyframes and the sequence of property changes.

Syntax:

@keyframes animation-name {
    from {
        /* Initial state */
    }
    to {
        /* Final state */
    }
}

element {
    animation: animation-name duration timing-function delay iteration-count direction;
}
Example: Basic Animation

@keyframes slide {
    from {
        transform: translateX(0);
    }
    to {
        transform: translateX(100px);
    }
}

.box {
    width: 100px;
    height: 100px;
    background-color: red;
    animation: slide 2s ease-in-out infinite;
}
Animation Properties:

animation-name: Name of the keyframes.
duration: Time it takes for the animation to complete.
timing-function: Similar to transition.
delay: Delay before the animation starts.
iteration-count: Number of times the animation will run (e.g., infinite).
direction: Direction of the animation (normal, reverse, alternate).

3. Keyframe Animation Example
Animating background color and movement:
@keyframes bounce {
    0% { background-color: red; transform: translateY(0); }
    50% { background-color: yellow; transform: translateY(-50px); }
    100% { background-color: green; transform: translateY(0); }
}

.box {
    width: 100px;
    height: 100px;
    animation: bounce 2s infinite;
}

4. Responsive Design with Media Queries
Media queries allow you to apply different styles based on the device's characteristics (e.g., screen width).

Syntax:

@media (condition) {
    /* CSS rules */
}
Common Conditions:

(max-width: 600px): Applies styles for small screens.
(min-width: 768px): Applies styles for larger screens.
(orientation: portrait): For portrait orientation.
Example: Mobile-Friendly Layout

/* Default styles for larger screens */
.container {
    display: flex;
    justify-content: space-between;
}

/* Styles for screens smaller than 600px */
@media (max-width: 600px) {
    .container {
        flex-direction: column;
        align-items: center;
    }
}

Multiple Media Queries: Combine multiple conditions to fine-tune responsiveness.

@media (max-width: 768px) and (orientation: portrait) {
    .container {
        grid-template-columns: 1fr;
    }
}

5. Mobile First Design
Start with styles that work on mobile devices first, then use media queries to adjust for larger screens.

Example: Mobile First

/* Mobile styles (default) */
.container {
    display: block;
}

/* Tablet and up */
@media (min-width: 768px) {
    .container {
        display: flex;
    }
}

6. Flexbox and Grid for Responsive Layouts
Use Flexbox or Grid to create flexible layouts that adapt to different screen sizes. For example:

Flexbox Responsive Layout:

.container {
    display: flex;
    flex-wrap: wrap;
}

.item {
    flex: 1 1 100%; /* Makes items stack on small screens */
}

@media (min-width: 768px) {
    .item {
        flex: 1 1 45%; /* Items take 45% of width on larger screens */
    }
}
Grid Responsive Layout:

.container {
    display: grid;
    grid-template-columns: 1fr; /* One column by default */
}

@media (min-width: 768px) {
    .container {
        grid-template-columns: 1fr 1fr; /* Two columns on larger screens */
    }
}

7. Example: Animated Button with Transition
<button class="btn">Hover me</button>

<style>
.btn {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.btn:hover {
    background-color: #45a049;
}
</style>
Task:
Create a button with an animation that changes its background color and scales when hovered.
Create a grid layout that changes from a single column on mobile devices to two columns on larger screens.
Use media queries to adjust font sizes for different screen sizes (small, medium, and large).


<!-- ----------------------------------------------- CSS Lecture 9: Advanced Selectors, Pseudo-Classes, and Pseudo-Elements ----------------------------------- -->

1. Advanced Selectors
CSS provides advanced selectors that allow you to target specific elements based on their attributes, position, or relationship with other elements.

Attribute Selectors: Target elements based on an attribute and its value.

/* Selects elements with a specific attribute */
input[type="text"] {
    background-color: lightyellow;
}

/* Selects elements with an attribute starting with a value */
a[href^="https"] {
    color: green;
}

/* Selects elements with an attribute containing a value */
a[href*="example"] {
    font-weight: bold;
}
Descendant Selector: Targets an element that is a descendant of another element.

.container p {
    color: blue;
}
Child Selector: Selects direct children of an element.

.parent > .child {
    margin-left: 20px;
}
Adjacent Sibling Selector: Selects an element that is immediately preceded by a certain element.

h2 + p {
    font-size: 18px;
}
General Sibling Selector: Selects all sibling elements that follow a specific element.

h2 ~ p {
    color: grey;
}

2. Pseudo-Classes
Pseudo-classes allow you to apply styles to an element based on its state or position in the document.

:hover: Triggered when an element is hovered over.

button:hover {
    background-color: blue;
}
:focus: Triggered when an element gains focus (e.g., an input field).

input:focus {
    border-color: green;
}
:nth-child(): Selects elements based on their position in a parent element.

/* Select the first paragraph */
p:nth-child(1) {
    font-weight: bold;
}

/* Select every second list item */
li:nth-child(2n) {
    color: red;
}
:first-child, :last-child: Select the first or last child of a parent element.

ul li:first-child {
    font-size: 18px;
}

ul li:last-child {
    font-size: 20px;
}
:not(): Selects elements that do not match a given selector.

p:not(.important) {
    color: grey;
}
:checked: Applies styles to checked checkboxes or radio buttons.

input:checked {
    background-color: yellow;
}

3. Pseudo-Elements
Pseudo-elements target a specific part of an element, like the first letter, line, or content before/after an element.

::before: Adds content before an element’s content.

.quote::before {
    content: "“";
    font-size: 30px;
    color: grey;
}
::after: Adds content after an element’s content.

.quote::after {
    content: "”";
    font-size: 30px;
    color: grey;
}
::first-letter: Targets the first letter of an element.

p::first-letter {
    font-size: 2em;
    color: red;
}
::first-line: Targets the first line of an element.

p::first-line {
    font-weight: bold;
}

4. Combining Selectors
You can combine multiple selectors for more complex targeting.

Group Selectors: Apply the same styles to multiple elements.

h1, h2, h3 {
    font-family: Arial, sans-serif;
}
Combinators: Combine different types of selectors like descendant, child, or sibling.

/* Selects <p> elements that are inside a .container */
.container p {
    color: blue;
}

/* Selects all <p> elements that are direct children of .container */
.container > p {
    color: green;
}

5. Example: Styling List Items Based on Position
<ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
    <li>Item 4</li>
</ul>

<style>
ul li:nth-child(odd) {
    background-color: lightgrey;
}

ul li:nth-child(even) {
    background-color: white;
}

ul li:first-child {
    font-weight: bold;
}

ul li:last-child {
    font-style: italic;
}
</style>

6. Example: Hover and Focus Effects
<button>Hover me</button>
<input type="text" placeholder="Focus here">

<style>
button:hover {
    background-color: #4CAF50;
}

input:focus {
    outline: none;
    border: 2px solid #4CAF50;
}
</style>
Task:
Use the :nth-child() selector to highlight every third list item in a list.
Create a button that changes its background color when hovered and displays a message when clicked (use ::after for the message).
Create a paragraph where the first letter is larger and a different color using the ::first-letter pseudo-element.


-------------------------------------- CSS Lecture 10: Advanced Layout Techniques – Flexbox, Grid, and CSS Variables --------------------------------

1. CSS Flexbox
Flexbox is a one-dimensional layout model that helps distribute space along a row or column.

Flex Container Properties:

display: flex: Turns the container into a flex container.

flex-direction: Defines the direction of the flex items (row, column, row-reverse, column-reverse).

.container {
    display: flex;
    flex-direction: row;
}
justify-content: Aligns items horizontally along the main axis.

.container {
    justify-content: center; /* other options: flex-start, flex-end, space-between, space-around */
}
align-items: Aligns items vertically along the cross axis.

.container {
    align-items: center; /* other options: flex-start, flex-end, stretch */
}
flex-wrap: Allows items to wrap onto the next line if needed.

.container {
    flex-wrap: wrap; /* allows wrapping of items */
}
Flex Item Properties:

flex-grow: Defines how an item grows relative to others.

.item {
    flex-grow: 1; /* item will take up remaining space */
}
flex-shrink: Defines how an item shrinks relative to others.

.item {
    flex-shrink: 1; /* item will shrink to fit container */
}
flex-basis: Defines the initial size of an item before growing or shrinking.

.item {
    flex-basis: 200px; /* item starts with 200px width */
}
align-self: Allows individual flex items to override align-items on the container.

.item {
    align-self: flex-start;
}


2. CSS Grid Layout
CSS Grid is a two-dimensional layout system that allows you to arrange items in rows and columns.

Grid Container Properties:

display: grid: Turns the container into a grid.

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Creates three equal-width columns */
}
grid-template-rows: Defines the height of each row.

.container {
    grid-template-rows: 100px 200px;
}
grid-gap (or gap): Sets the space between rows and columns.

.container {
    grid-gap: 20px;
}
grid-template-areas: Allows naming specific grid areas for easier layout control.

.container {
    grid-template-areas:
        "header header header"
        "main main sidebar"
        "footer footer footer";
}

------------Grid Item Properties:-----------

grid-column: Defines the horizontal placement of a grid item.

.item {
    grid-column: 2 / 4; /* item spans from column 2 to 4 */
}
grid-row: Defines the vertical placement of a grid item.

.item {
    grid-row: 1 / 3; /* item spans from row 1 to 3 */
}
3. CSS Variables
CSS Variables (Custom Properties) are reusable values that can be set and accessed anywhere in your CSS.

Syntax:

:root {
    --primary-color: #3498db;
    --secondary-color: #2ecc71;
}

.button {
    background-color: var(--primary-color);
    color: var(--secondary-color);
}
:root: The global scope for variables, usually used at the top of the stylesheet.
--variable-name: Defining the variable.
var(--variable-name): Accessing the variable's value.
Example: Theming with CSS Variables

:root {
    --background-color: white;
    --text-color: black;
}

body {
    background-color: var(--background-color);
    color: var(--text-color);
}

.dark-theme {
    --background-color: #2c3e50;
    --text-color: white;
}
By adding the class .dark-theme to the body or any parent element, the variables change, providing a simple theming solution.

------------------------------------------------------------4. Responsive Layouts with Flexbox and Grid----------------------------------------------

You can use Flexbox and Grid to create layouts that adapt to various screen sizes using media queries.

Example: Flexbox with Media Queries

.container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
}

.item {
    flex: 1 1 30%; /* 30% width on larger screens */
}

@media (max-width: 768px) {
    .item {
        flex: 1 1 100%; /* Full-width on smaller screens */
    }
}
Example: Grid with Media Queries

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}

@media (max-width: 768px) {
    .container {
        grid-template-columns: 1fr; /* 1 column on smaller screens */
    }
}

5. Advanced Layout Example: Combining Flexbox and Grid
<div class="container">
    <header class="header">Header</header>
    <main class="main">Main Content</main>
    <aside class="sidebar">Sidebar</aside>
    <footer class="footer">Footer</footer>
</div>

<style>
.container {
    display: grid;
    grid-template-areas:
        "header header header"
        "main main sidebar"
        "footer footer footer";
    grid-gap: 20px;
}

.header {
    grid-area: header;
}

.main {
    grid-area: main;
}

.sidebar {
    grid-area: sidebar;
}

.footer {
    grid-area: footer;
}

@media (max-width: 768px) {
    .container {
        grid-template-areas:
            "header"
            "main"
            "sidebar"
            "footer";
    }
}
</style>

Task:
Create a responsive grid layout with three columns that switch to one column on smaller screens.
Use Flexbox to create a navigation bar with evenly spaced links.
Define CSS variables for a light and dark theme and switch between them with a class toggle.



<!-- ----------------------------------------------- CSS Lecture 11: Animations, Transitions, and Transformations ----------------------------- -->

1. CSS Transitions
CSS transitions allow you to change property values smoothly over a given duration.

Syntax:

element {
    transition: property duration timing-function delay;
}
property: The CSS property to transition (e.g., background-color, width, height).
duration: How long the transition lasts (e.g., 0.5s or 200ms).
timing-function: Defines the speed curve (e.g., ease, linear, ease-in, ease-out, cubic-bezier()).
delay: The delay before the transition starts (e.g., 0.2s).
Example: Simple Transition

<button>Hover me</button>

<style>
button {
    background-color: blue;
    color: white;
    padding: 10px;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: green;
}
</style>

2. CSS Animations
CSS animations allow you to define keyframes for a set of styles and control how they change over time.

Syntax:

element {
    animation: name duration timing-function delay iteration-count direction fill-mode;
}

/* Keyframes */
@keyframes animation-name {
    from {
        /* initial styles */
    }
    to {
        /* final styles */
    }
}

name: The name of the keyframes animation.
duration: How long the animation lasts.
timing-function: Speed curve of the animation (same as in transitions).
delay: Delay before the animation starts.
iteration-count: Number of times the animation will repeat (infinite for infinite loop).
direction: Defines the direction of the animation (normal, reverse, alternate).
fill-mode: Determines what happens when the animation is not playing (e.g., forwards, backwards, both).
Example: Simple Animation

<div class="box"></div>

<style>
.box {
    width: 100px;
    height: 100px;
    background-color: red;
    animation: move 2s ease-in-out infinite;
}

@keyframes move {
    0% {
        transform: translateX(0);
    }
    50% {
        transform: translateX(200px);
    }
    100% {
        transform: translateX(0);
    }
}
</style>
In this example, the .box element moves horizontally back and forth.


3. Animation Keyframes
Keyframes define the specific steps in an animation, specifying the state of the element at various points.

Example: Bounce Animation
@keyframes bounce {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-30px);
    }
}

.box {
    width: 100px;
    height: 100px;
    background-color: red;
    animation: bounce 1s ease-in-out infinite;
}


-------------------------------------------------------4. CSS Transforms-----------------------------------------------

CSS transforms allow you to apply various transformations (like rotation, scaling, and translation) to elements.

Transform Functions:

translate(): Moves an element along the X and Y axes.

.box {
    transform: translate(50px, 100px);
}
rotate(): Rotates an element by a specified angle.

.box {
    transform: rotate(45deg);
}
scale(): Resizes an element.

.box {
    transform: scale(1.5);
}
skew(): Skews an element along the X and Y axes.

.box {
    transform: skew(20deg, 10deg);
}
matrix(): A more complex function that combines multiple transforms.

.box {
    transform: matrix(1, 0.5, -0.5, 1, 50, 100);
}
Example: Transforming an Element

<div class="box"></div>

<style>
.box {
    width: 100px;
    height: 100px;
    background-color: red;
    transition: transform 0.3s ease;
}

.box:hover {
    transform: rotate(45deg) scale(1.2);
}
</style>
In this example, the .box rotates and scales up when hovered.



---------------------------------------5. Combining Transitions, Animations, and Transforms--------------------------------0

You can combine transitions, animations, and transforms to create more complex effects.

Example: Animated Button with Hover Effect

<button class="animated-btn">Click Me</button>

<style>
.animated-btn {
    padding: 10px 20px;
    background-color: blue;
    color: white;
    border: none;
    cursor: pointer;
    transition: transform 0.3s ease, background-color 0.3s ease;
}

.animated-btn:hover {
    transform: translateY(-10px);
    background-color: darkblue;
}

.animated-btn:active {
    transform: translateY(5px);
}
</style>
Here, the button moves upward when hovered and changes color. When clicked (active), it moves down a little.

-----------------------------------------6. Performance Tips for Animations and Transitions-----------------------------

Use will-change: Helps the browser prepare for specific property changes to improve performance.

.box {
    will-change: transform, opacity;
}
Avoid animating layout properties (like width, height, margin, etc.) as they can trigger reflows, making the animation slower.

Task:
Create a simple animation that rotates an element infinitely.
Use @keyframes to create a bouncing effect on a button when hovered.
Create a transformation effect that enlarges a box when hovered, then animates it back to its original size with a smooth transition.